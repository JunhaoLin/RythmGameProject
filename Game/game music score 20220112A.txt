from typing import Any, Dict, List
from node import ANode
from DataStructure.TimeCode import TimeCodeInMeasures
from DataStructure.util.UtilityClass import meter
from Game.Util.UtilityFunctions import sort_node_list_by_start_time

class pianoGameMusicScore():
    """This class represents the game score that is used by the interactive part of the game
    This score is specifically for piano-like falling pattern.

    Example:
        | ~ |   |   |   |
        |   | ~ |   | ~ |
        |   |   | ~ |   |
        |   |   |   |   |
        |   | ~ | ~ |   |
       
        - This is a pianoGameMusicScore with 4 trails.
        - Where `~` is a node which will fall down to the line and to be hit by players.
    """

    # -------------- Fields ----------------
    _all_nodes: List[ANode]
    _num_trail: int
    _fix_meter: meter
    _fix_bpm: float

    _node_start_time_in_seconds: Dict[ANode, float]
    _node_end_time_in_seconds: Dict[ANode, float]
    

    # ------------ Constructor -------------
    def __init__(self, all_nodes: List[ANode], num_trail: int, fix_meter: meter, fix_bpm: float) -> None:
        self._all_nodes = sort_node_list_by_start_time(all_nodes)
        self._num_trail = num_trail
        self._fix_meter = fix_meter
        self._fix_bpm = fix_bpm
        
        self._node_start_time_in_seconds = self.get_all_node_start_time_in_second()
        self._node_end_time_in_seconds = self.get_all_node_end_time_in_second()

        if not self.validate_piano_score():
            raise ValueError('Some parameter(s) given to this object are not legal')
        

    # -------------- Methods ---------------
    def __hash__(self):
        return hash(self._all_nodes + self._num_trail + self._fix_meter + self._fix_bpm)

    def __eq__(self, obj: Any):
        if not isinstance(obj, pianoGameMusicScore):
            return False
        return self._all_nodes == obj._all_nodes \
            and self._num_trail == obj._num_trail \
            and self._fix_meter == obj._fix_meter \
            and self._fix_bpm == obj._fix_bpm

    def validate_piano_score(self) -> bool:
        """Method to validate the legality of a pianoGameMusicScore object."""

        for node in self._all_nodes:
            if not isinstance(node, ANode) \
                or node.get_init_trail > self._num_trail:
                return False

        if not isinstance(self._num_trail, int):
            return False

        if not isinstance(self._fix_meter, meter):
            return False

        if not isinstance(self._fix_bpm, float):
            return False

        return True
 
    def sort_all_nodes_in_score(self) -> None:
        """Method to sort all the nodes in the score according to the start time"""
        sorted_nodes = sort_node_list_by_start_time(self._all_nodes)
        self._all_nodes = sorted_nodes

    def get_note_start_time_in_second(self, specific_node: ANode) -> float:
        """Method to locate the starting time of a node in seconds"""
        node_start_time = specific_node._start_time

        time_in_seconds: float
        time_in_seconds = node_start_time.get_time_in_seconds(node_start_time._num_measure, \
            node_start_time._num_beat, self._fix_bpm, self._fix_meter)

        return time_in_seconds

        
    def get_note_end_time_in_second(self, specific_node: ANode) -> float:
        """Method to locate the ending time of a node in seconds"""
        node_end_time = specific_node._end_time

        time_in_seconds: float
        time_in_seconds = node_end_time.get_time_in_seconds(node_end_time._num_measure, \
            node_end_time._num_beat, self._fix_bpm, self._fix_meter)

        return time_in_seconds

    def get_all_node_start_time_in_second(self) -> Dict[ANode, float]:
        """Method to locate the starting time of all nodes in seconds"""
        node_and_seconds: Dict[ANode, float]
        
        for node in self._all_nodes:
            node_and_seconds[node] = self.get_note_start_time_in_second(node)

        return node_and_seconds

    def get_all_node_end_time_in_second(self) -> Dict[ANode, float]:
        """Method to locate the ending time of all nodes in seconds"""
        node_and_seconds: Dict[ANode, float]

        for node in self._all_nodes:
            node_and_seconds[node] = self.get_note_end_time_in_second(node)
            
        return node_and_seconds
    
        
        

class VBPMPianoGameMusicScore(pianoGameMusicScore):
    """A specific kind of pianoGameMusicScore which have fix meter but changing bpm"""

    # --------------- Fields -----------------
    _all_nodes: List[ANode]
    _num_trail: int
    _fix_meter: meter
    _var_bpm: Dict[TimeCodeInMeasures, float]

    _node_start_time_in_seconds: Dict[ANode, float]
    _node_end_time_in_seconds: Dict[ANode, float]


    # ------------- Constructor --------------
    def __init__(self, all_nodes: List[ANode], num_trail: int, fix_meter: meter, \
        var_bpm: Dict[TimeCodeInMeasures, float]) -> None:
        self._all_nodes = sort_node_list_by_start_time(all_nodes)
        self._num_trail = num_trail
        self._fix_meter = fix_meter
        # !Note!: the first bpm must be at the start of the entire score
        self._var_bpm = var_bpm
        
        self._node_start_time_in_seconds = self.get_all_node_start_time_in_second()
        self._node_end_time_in_seconds = self.get_all_node_end_time_in_second()

        if not self.validate_piano_score():
            raise ValueError('Parameters of this object is illegal')


    # --------- Overwritten methods ----------
    def __hash__(self):
        return hash(self._all_nodes, self._num_trail, self._fix_meter, self._var_bpm)

    def __eq__(self, obj: Any):
        if not isinstance(obj, VBPMPianoGameMusicScore):
            return False
        return self._all_nodes == obj._all_nodes \
            and self._num_trail == obj._num_trail \
            and self._fix_meter == obj._fix_meter \
            and self._var_bpm == obj._var_bpm

    def validate_piano_score(self) -> bool:
        """Method to validate the legality of a pianoGameMusicScore object."""
        for node in self._all_nodes:
            if not isinstance(node, ANode) \
                or node.get_init_trail > self._num_trail:
                return False

        if not isinstance(self._num_trail, int):
            return False
       
        if not isinstance(self._fix_meter, meter):
            return False

        if self._var_bpm.__len__ == 0:   #### length是这么用的吗
            return False

        for timecode, bpms in zip(list(self._var_bpm.keys()), list(self._var_bpm.values())):
            if not isinstance(timecode, TimeCodeInMeasures) or not isinstance(bpms, float):
                return False

        first_bpm_time = list(self._var_bpm.keys())[0]

        if first_bpm_time.get_num_measure != 0 or first_bpm_time.get_num_beat != 0.0:
            return False

        return True


    def get_note_start_time_in_second(self, specific_node: ANode) -> float:
        note_start_time: float
        note_start_time = 0.0

        return note_start_time

    def get_note_end_time_in_second(self, specific_node: ANode) -> float:
        note_end_time: float
        note_end_time = 0.0

        return note_end_time

    

class VMVBPianoGameMusicScore(VBPMPianoGameMusicScore):
    """A special kind of pianoGameMusicScore which have changing meter and bpm"""

    # --------------- Fields -----------------
    _all_nodes: List[ANode]
    _num_trail: int
    _var_meter: Dict[TimeCodeInMeasures, meter]
    # !Note!: meter change can only happen at start of measures
    _var_bpm: Dict[TimeCodeInMeasures, float]

    _node_start_time_in_seconds: Dict[ANode, float]
    _node_end_time_in_seconds: Dict[ANode, float]


    # ------------- Constructor --------------
    def __init__(self, all_nodes: List[ANode], num_trail: int, var_meter: Dict[TimeCodeInMeasures, meter], \
        var_bpm: Dict[TimeCodeInMeasures, float]) -> None:
        self._all_nodes = sort_node_list_by_start_time(all_nodes)
        self._num_trail = num_trail
        self._var_meter = var_meter
        self._var_bpm = var_bpm
        
        self._node_start_time_in_seconds = self.get_all_node_start_time_in_second()
        self._node_end_time_in_seconds = self.get_all_node_end_time_in_second()

        if not self.validate_piano_score():
            raise ValueError('Parameters of this object is illegal')

    
    # --------- Overwritten methods ----------
    def __hash__(self):
        return hash(self._all_nodes, self._num_trail, self._var_meter, self._var_bpm)

    def __eq__(self, obj: Any):
        if not isinstance(obj, VMVBPianoGameMusicScore):
            return False
        return self._all_nodes == obj._all_nodes \
            and self._num_trail == obj._num_trail \
            and self._var_meter == obj._var_meter \
            and self._var_bpm == obj._var_bpm

    def validate_piano_score(self) -> bool:
        """Method to validate the legality of a pianoGameMusicScore object."""
        for node in self._all_nodes:
            if not isinstance(node, ANode) \
                or node.get_init_trail > self._num_trail:
                return False

        if not isinstance(self._num_trail, int):
            return False
       
        if self._var_meter.__len__ == 0:   #### length是这么用的吗
            return False

        if self._var_bpm.__len__ == 0:   #### length是这么用的吗
            return False

        for timecode, meters in zip(list(self._var_meter.keys()), list(self._var_meter.values())):
            if not isinstance(timecode, TimeCodeInMeasures) or not isinstance(meters, meter):
                return False

        for timecode, bpms in zip(list(self._var_bpm.keys()), list(self._var_bpm.values())):
            if not isinstance(timecode, TimeCodeInMeasures) or not isinstance(bpms, float):
                return False

        first_meter_time = list(self._var_bpm.keys())[0]

        if first_meter_time.get_num_measure != 0 or first_meter_time.get_num_beat != 0.0:
            return False

        first_bpm_time = list(self._var_bpm.keys())[0]

        if first_bpm_time.get_num_measure != 0 or first_bpm_time.get_num_beat != 0.0:
            return False

        return True


    def get_note_start_time_in_second(self, specific_node: ANode) -> float:
        pass

    def get_note_end_time_in_second(self, specific_node: ANode) -> float:
        pass